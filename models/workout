var mongoose = require('mongoose');

// SCHEMA SETUP
var workoutSchema = new mongoose.Schema({
    isUnlisted: {type: Boolean, default: false},
    name: String,
    description: String,
    intensity: String,
    calorie: Number,
    collaboration: String,
    address: String,
    neighborhood: String,
    isOutdoors: Boolean,
    isPublic: Boolean,
    locInstructions: String,
    whatToBring: String,
    timezone: String,
    location: {
        type: {
            type: String, // Don't do `{ location: { type: String } }`
            enum: [ 'Point' ], // 'location.type' must be 'Point'
            required: true
        },
        coordinates: {
            type: [ Number ], // [Longitude, Latitude]
            required: true
        }
    },
    images : [
        {
            caption: String,
            url : String
        }
    ],
    coverImage: String,
    duration: String,
    categories: [ {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'TrainingStyle'
    } ],
    createdAt: { type: Date, default: Date.now },
    workoutInfo: [
        {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'WorkoutInfo'
        }
    ],
    author: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },
    reviews: [
        {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Review'
        }
    ],
    stars: {
        mean: Number,
        sum: Number,
        count: Number
    }
});
workoutSchema.pre('remove', function(next){
    // delete any references to this comment from campgrounds
    this.model('User').update(
        { },
        { '$pull': {'workoutsCreated': this._id}},
        { 'multi': true},
        next
    );
});
workoutSchema.index({ location: '2dsphere' });
workoutSchema.methods.city = function(){
    return this.address.split(', ')[1];
};
workoutSchema.methods.state = function(){
    return this.address.split(', ')[2].split(' ')[0];
};
module.exports = mongoose.model('Workout', workoutSchema);